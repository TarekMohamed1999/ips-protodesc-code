PacketType := Bit7;
Version := Bit32;
CIDLength := Bit4;
FullPacketNum := Bit62;
FrameType := Bit8;
Cryptobits := Bits;

VarEncoding := {
	length : Bit2;
	value  : Bits;
} where {
	value.length == (length*length * 8) - 2;
};

PacketNumber8 := {
	first_bit     : Bit;
	packet_number : Bit7;
} where {
	first_bit == 0;
};

PacketNumber16 := {
	first_twobits : Bit2;
	packet_number : Bit14;
} where {
	first_twobits == 1;
};

PacketNumber32 := {
	first_twobits : Bit2;
	packet_number : Bit30;
} where {
	first_twobits == 2;
};

PacketNumber := { PacketNumber8 | PacketNumber16 | PacketNumber32 };

PaddingFrame := {
	type 	: FrameType;
} where {
	type == 0;
};

Frame := {PaddingFrame};

decrypt :: (enc_payload : Cryptobits, pn : FullPacketNum) -> Bits;

LongHeader := {
	header_type   : Bit;
	type		  : PacketType;
	version		  : Version;
	dcid_len	  : CIDLength;
	scid_len	  : CIDLength;
	dcid		  : Bits;
	scid		  : Bits;
	payload_len   : VarEncoding;
	packet_number : PacketNumber;
	payload		  : Bits;	
} where {
	header_type == 1;
	dcid.length == ((dcid_len == 0) ? 0 : (dcid_len+3) * 8);
	scid.length == ((scid_len == 0) ? 0 : (scid_len+3) * 8);
	payload.length == payload_len*payload_len;
};

ShortHeader := {
	header_type	      : Bit;
	key_phase         : Bit;
	third_bit         : Bit;
	forth_bit         : Bit;
	google_demux      : Bit;
	reserved          : Bit3;
	dcid              : Bits;
	packet_number     : PacketNumber;
	protected_payload : Cryptobits -> payload : Frame[];
} where { 
	header_type == 0;
	third_bit == 1;
	forth_bit == 1;
	google_demux == 0;
} onparse {
	payload = decrypt(protected_payload, packet_number);
};

VersionNegotiation := {
	header_type        : Bit;
	unused			   : Bit7;
	ver				   : Version;
	dcid_len		   : CIDLength;
	scid_len		   : CIDLength;
	dcid			   : Bits;
	scid			   : Bits;
	supported_versions : Version[];
} where { 
	header_type == 1;
	ver == 0;
	dcid.length == ((dcid_len == 0) ? 0 : (dcid_len+3) * 8);
	scid.length == ((scid_len == 0) ? 0 : (scid_len+3) * 8);
};

PDUs := {LongHeader | ShortHeader | VersionNegotiation};