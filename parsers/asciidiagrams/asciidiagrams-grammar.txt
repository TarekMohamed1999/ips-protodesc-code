# Generic helpers

letter      = anything:x ?(x in ascii_letters)
punc        = anything:x ?(x in punctuation)
digit       = anything:x ?(x in '0123456789')
letterdigit = letter|digit
word        = <(letter|punc|number)+>:ls -> str(ls)
alphanum    = <(letter|number)+>:ls -> str(ls)
wordnum     = <(letter|number|punc)+>:ls -> str(ls)

uppercase_letter = anything:x ?(x in ascii_uppercase) -> x
lowercase_letter = anything:x ?(x in ascii_lowercase) -> x
number           = <digit+>:ds -> int(ds)

capitalised_word = uppercase_letter:l <(lowercase_letter|punc)*>:ls -> str(l + ls)

pdu_name = <(word:w ?(w != "is")' '?)*>:name -> str(name)[:-1]

# expressions
parens = '(' ' '? equality_expr:expr ' '? ')' -> expr

primary_expr = ' '? (number:n -> new_constant("Number", n)
             | alphanum:name -> new_fieldaccess(new_this(), name.strip())
             | '`' <(alphanum:w ' '?)*>:name '`' -> new_fieldaccess(new_this(), name.strip())
             | parens)

multiplicative_expr = primary_expr:left (' '? ('*'|'/'|'%'):operator primary_expr:operand -> (operator, operand))*:rights -> build_tree(left, rights, "")
additive_expr = multiplicative_expr:left (' '? ('+'|'-'):operator multiplicative_expr:operand -> (operator, operand))*:rights -> build_tree(left, rights, "")

ordinal_expr = additive_expr:left (' '? ('<='|'<'|'>='|'>'):operator additive_expr:operand -> (operator, operand))*:rights -> build_tree(left, rights, "")
boolean_expr = ordinal_expr:left (' '? ('&&'|'||'|'!'|'and'|'or'|'not'):operator ordinal_expr:operand -> (operator, operand))*:rights -> build_tree(left, rights, "")
equality_expr = boolean_expr:left (' '? ('=='|'!='):operator boolean_expr:operand -> (operator, operand))*:rights -> build_tree(left, rights, "")

field_name = <(alphanum:w ' '?)*>:name -> name.strip()

short_field_name = alphanum:name -> name.strip()

field_title = field_name:full_label ('(' short_field_name:short_label ')' -> short_label)?:short_label (('.' -> (full_label, short_label, generate_bitstring_type(protocol, full_label, None, None))) | ': ' equality_expr:size (' ' ('bits'|'bytes'|'bit'|'byte'))?:units ('; present only when' equality_expr:cond)? '.' -> (full_label, short_label, generate_bitstring_type(protocol, full_label, size, units)))

# Preamble

preamble = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:name "is formatted as follows:" -> name

# Diagram

separator_line = ('|'|'..') ws '+-'+ '+'? <(anything:x ?(x != "|" and x != '.'))*>:ls -> None
diagram_field_var = ('|'|'..') <(anything:x ?(x != "|" and x != '.'))*>:ls '.' -> ("var", str(ls).strip())
diagram_field = ('|'|'..') <(anything:x ?(x != "|" and x != '.'))*>:ls -> (int((len(str(ls))+1)/2), str(ls).strip())
diagram = <(anything:x ?(x != "|" and x != '.'))*> (separator_line|diagram_field_var|diagram_field)+:fields <(anything:x ?(x != "|" and x != '.'))*> -> proc_diagram_fields(fields)
