# Generic helpers

letter      = anything:x ?(x in ascii_letters)
punc        = anything:x ?(x in punctuation)
digit       = anything:x ?(x in '0123456789')
letterdigit = letter|digit
word        = <(letter|punc|number)+>:ls -> str(ls)
alphanum    = <(letter|number|'_')+>:ls -> str(ls)
wordnum     = <(letter|number|punc)+>:ls -> str(ls)

uppercase_letter = anything:x ?(x in ascii_uppercase) -> x
lowercase_letter = anything:x ?(x in ascii_lowercase) -> x
number           = <digit+>:ds -> int(ds)

capitalised_word = uppercase_letter:l <(lowercase_letter|punc)*>:ls -> str(l + ls)

pdu_name = <(alphanum:w ?(w != "is" and w != "protocol" and w != "PDUs" and w != "and")' '?)>*:name -> stem("".join(name).strip())

# expressions redo
parens = '(' ws equality_expr:e ws ')' -> e
value  = number:n -> new_constant("Number", n)
       | parens
       | method_call:method -> method
       | field_access:access -> access
       | short_field_name:name -> new_methodinvocation(new_fieldaccess(new_this(), name), "to_number", [])

eq  = ws '==' ws bool_expr:n -> ('==', n)
neq = ws '!=' ws bool_expr:n -> ('==', n)

and = ws '&&' ws ord_expr:n -> ('&&', n)
or  = ws '||' ws ord_expr:n -> ('||', n)
not = ws '!'  ws ord_expr:n -> ('!',  n)

leq = ws '<=' ws addsub_expr:n -> ('<=', n)
lt  = ws '<'  ws addsub_expr:n -> ('<',  n)
geq = ws '>=' ws addsub_expr:n -> ('>=', n)
gt  = ws '>'  ws addsub_expr:n -> ('>',  n)

add = ws '+' ws muldiv_expr:n -> ('+', n)
sub = ws '-' ws muldiv_expr:n -> ('-', n)

mul = ws '*' ws pow_expr:n -> ('*', n)
div = ws '/' ws pow_expr:n -> ('/', n)
mod = ws '%' ws pow_expr:n -> ('%', n)

pow = '^' ws value:n -> ('^', n)

equality = (eq | neq)
boolean  = (and | or | not)
ordinal  = (leq | lt | geq | gt)
addsub   = (add | sub)
muldiv   = (mul | div | mod)

equality_expr = bool_expr:left   equality*:rights -> build_tree(left, rights, "")
bool_expr     = ord_expr:left    boolean*:rights  -> build_tree(left, rights, "")
ord_expr      = addsub_expr:left ordinal*:rights  -> build_tree(left, rights, "")
addsub_expr   = muldiv_expr:left addsub*:rights   -> build_tree(left, rights, "")
muldiv_expr   = pow_expr:left    muldiv*:rights   -> build_tree(left, rights, "")
pow_expr      = value:left       pow*:rights      -> build_tree(left, rights, "")

method_call = short_field_name:name '.' 'Size' -> new_methodinvocation(new_fieldaccess(new_this(), name), "size", [])
field_access = short_field_name:name '.' short_field_name:field -> new_methodinvocation(new_fieldaccess(new_fieldaccess(new_this(), name), field), "to_number", [])

field_name = <(alphanum:w ' '?)*>:name -> name.strip()

short_field_name = alphanum:name -> name.strip()

field_title_name_only = field_name:full_label ('(' short_field_name:short_label ')' -> short_label)?:short_label '.' -> new_field(full_label, short_label, None, None, None, None, False)
field_title_array = field_name:full_label ('(' short_field_name:short_label ')' -> short_label)?:short_label ': [' pdu_name:element_type_name ']' '.' -> new_field(full_label, short_label, None, element_type_name, None, None, True)
field_title_size = field_name:full_label ('(' short_field_name:short_label ')' -> short_label)?:short_label ': ' equality_expr:size ' ' ('bits'|'bytes'|'bit'|'byte'|(pdu_name:name)->name):units ('; present only when ' equality_expr:is_present -> is_present)?:is_present '.' -> new_field(full_label, short_label, size, units, None, is_present, False)
field_title_size_constraint = field_name:full_label ('(' short_field_name:short_label ')' -> short_label)?:short_label ': ' (equality_expr:size)? ' ' ('bits'|'bytes'|'bit'|'byte'|(pdu_name:name)->name):units '; ' equality_expr:value_constraint ('; present only when ' equality_expr:is_present -> is_present)?:is_present '.' -> new_field(full_label, short_label, size, units, value_constraint, is_present, False)
field_title_constraint = field_name:full_label ('(' short_field_name:short_label ')' -> short_label)?:short_label ': ' equality_expr:value_constraint '.' ('; present only when ' equality_expr:is_present -> is_present)?:is_present -> new_field(full_label, short_label, None, None, value_constraint, is_present, False)

field_title = field_title_name_only | field_title_size | field_title_size_constraint | field_title_constraint | field_title_array

# Preamble

preamble = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:name "is formatted as follows:" -> name

# Diagram

separator_line = ('|'|'..') ws '+-'+ '+'? <(anything:x ?(x != "|" and x != '.'))*>:ls -> None
diagram_field_var = ('|'|'..') <(anything:x ?(x != "|" and x != '.'))*>:ls '.' -> ("var", str(ls).strip())
diagram_field = ('|'|'..') <(anything:x ?(x != "|" and x != '.'))*>:ls -> (int((len(str(ls))+1)/2), str(ls).strip())
diagram = <(anything:x ?(x != "|" and x != '.'))*> (separator_line|diagram_field_var|diagram_field)+:fields <(anything:x ?(x != "|" and x != '.'))*> -> proc_diagram_fields(fields)

# Enums
variant_list = ("an " | "a ") pdu_name:name (', ' ('or ')? ("an " | "a ") pdu_name:names)*:names -> [name] + names
enum = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:name "is one of: " variant_list:names "." -> (name, names)

# Functions
function = <(word:w ?(w != "The")' '?)+>? 'The ' short_field_name:name "function is defined as:" -> (name)
parameter = (short_field_name:name ': ' pdu_name:type) -> (name, type)
parameter_list = parameter:p (',' ws parameter:ps)*:ps -> [p] + ps
function_signature = 'func ' short_field_name:name '(' parameter_list:params ')' ws '->'  ws pdu_name:return_type anything* -> (name, params, return_type)

# Protocol Definition

pdu_list = pdu_name:name (', ' ('and ')? pdu_name:names)*:names -> [name] + names
protocol_definition = <(word:w ?(w != 'The' and w != "This")' '?)+>? 'This document describes the ' pdu_name:p_name 'protocol. The ' pdu_name:name 'protocol uses ' pdu_list:names '.' -> (name, names)
