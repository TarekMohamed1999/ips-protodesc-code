# primitives

letter      = anything:x ?(x in ascii_letters)
digit       = anything:x ?(x in '0123456789')
letterdigit = letter|digit

uppercase_letter = anything:x ?(x in ascii_uppercase)
lowercase_letter = anything:x ?(x in ascii_lowercase)
number           = <digit+>:ds -> int(ds)

type_name  = <uppercase_letter>:x <letterdigit+>:xs -> x + "".join(xs)
field_name = <lowercase_letter>:x <(letter|'_')+>:xs -> x + "".join(xs)

bitstring = "Bits" number?:size -> new_bitstring(size=size)
array     = (bitstring|type_name):element_type "[" number?:length "]" -> new_array(element_type=element_type, length=length)
type      = array|bitstring|type_name

structfield = field_name:name ":" type:constructor -> new_structfield(name, constructor)
parameter = field_name:name ":" type:constructor -> new_parameter(name, constructor)

typedef = "type" type_name:name "=" type:constructor ";" -> new_typedef(name, constructor)
funcdef = "func" field_name:func_name "(" parameter:param ("," parameter:next_param -> next_param)*:params ")->" type_name:return_type ";" -> new_func(func_name, [param] + params, return_type)
struct  = "struct" type_name:struct_name "{" structfield:field ("," structfield:next_field -> next_field)*:fields "};" -> new_struct(struct_name, [field] + fields)
pdus    = "pdus={" type_name:name ("," type_name:name -> name)*:names "};" -> set_pdus([name] + names)

protocol = (typedef|struct|funcdef)+ pdus