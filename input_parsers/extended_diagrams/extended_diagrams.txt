lf          = '\n'
ff          = '\f'
space       = (' '|'	')
spaces      = space+:a -> "".join(a)
indent      = ' '{3}
binary      = ('0'|'1')
bits        = ('bits'|'bit')
number      = <digit+>:ds -> int(ds)
true        = ('True' | 'true')
false       = ('False' | 'false')

abbrv           = letterOrDigit+:x -> "".join(x)
abbrv_bracket   = '(' abbrv:x ')' -> x

word        = (letterOrDigit)+:x -> "".join(x)
ws_word     = ws word:x -> ' ' + x
spaces_word = spaces word:x -> ' ' + x

type_name   = word:a spaces_word*:b -> a + "".join(b)

########################################################################
# Punctuation/Char/Chars
########################################################################

punctuation = anything:x ?(x in punctuation) -> x
punctuation_not_colon           = punctuation:b ?(b != ':') -> b

char                            = (digit|letter|punctuation|space)
char_no_crlf                    = (digit|letter|punctuation|spaces)
char_no_crlf_colon              = (digit|letter|punctuation_not_colon|spaces)
char_no_digit                   = (letter|punctuation|space)
char_visible                    = (digit|letter|punctuation)

chars_visible                   = char_visible+:x -> "".join(x)
chars_visible_space_separated   = (chars_visible+:x ' ':y -> "".join(x) + y)*:a chars_visible*:b -> "".join(a) + "".join(b)


########################################################################
# RFC
########################################################################

crlf                            = (page_separator|lf)
s                               = (space|crlf indent)
s_word                          = s word:a -> ' ' + a

page_separator                  = page_footer ff lf page_header_footer lf
page_footer                     = lf:a page_header_footer:b lf:c
page_header_footer              = chars_visible_space_separated spaces chars_visible_space_separated spaces chars_visible_space_separated

rfc                             = section*:sections -> ExtendedDiagrams.rfc(Dom(sections))

########################################################################
# Section
########################################################################

section                         = section_title_line:a section_body:b -> Section(a["section_number"], a["title"], type=b["type"], elements=b["elements"])

section_title                   = section_number:section_number ('.':x ' '+:y -> x + "".join(y)):separator chars_visible_space_separated:title -> {"section_number": section_number, "title": title}
section_title_line              = section_title:a crlf -> a
section_number                  = (digit+):a (('.' digit+)*):b -> ".".join(list(map(lambda x: x[0], ([a] + b))))

section_body                    = (pdu | structure | section_empty | section_regular)
section_regular                 = section_line* -> {"elements": [], "type": "regular"}
section_empty                   = crlf* -> {"elements": [], "type": "empty"}

section_line                    = char_no_digit:a char*:b crlf -> a + "".join(b)
                                | crlf -> ''
section_lines                   = section_line*

########################################################################
# Pdu
########################################################################

pdu                             = pdu_intro structure:a -> {"elements": a["elements"], "type": "pdu"}

pdu_name_word                   = s_word:b ?(b != ' packet') -> b
pdu_name                        = word:a pdu_name_word*:b -> a + "".join(b)

pdu_intro_pre                   = (indent char_no_crlf_colon+ crlf+)*
pdu_intro                       = crlf* pdu_intro_pre{0,1} (pdu_intro_single)
pdu_intro_single                = indent ('An'|'A') s pdu_name s 'packet' s 'is' s 'formatted' s 'as' s 'follows:' crlf*

########################################################################
# Structure
########################################################################

structure                       = structure_prefix crlf* art:a figure{0,1} fields_prefix{0,1} fields:b section_lines -> {"elements": [a,b], "type": "structure"}
structure_prefix                = crlf* (indent char_visible:a char_no_crlf*:b crlf+ -> a+"".join(b))*:a

figure                          = indent ' '* 'Figure ' (char_no_crlf+ crlf)+ crlf
fields_prefix                   = (indent char_visible char_no_crlf_colon* (crlf | ":" crlf) crlf*)+

########################################################################
# ASCII Art Packet Diagram
########################################################################

art                             = art_indent art_header art_body
art_indent                      = ' '{0,8}
art_crlf                        = ' '* (crlf crlf | crlf art_indent)

art_field_body_punctuation      = punctuation:x ?(x not in "|.=[]()") -> x
art_field_body_char             = (letterOrDigit|art_field_body_punctuation|' ')
art_field_body_chars            = art_field_body_char+:x art_field_body_abbrv:y art_field_body_char*:z -> {'body': "".join(x)+y["body"]+"".join(z), 'name': "".join(x), 'abbrv': y["abbrv"]}
art_field_body_abbrv            = abbrv_bracket:x -> {"body": '(' + x + ')', "abbrv": x}
                                | -> {"body": "", "abbrv": None}

art_header                      = art_header_a art_crlf art_header_b art_crlf art_separator_full art_crlf
art_header_a                    = '0                   1                   2                   3'
art_header_b                    = '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1'
art_separator_full              = '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+'

art_body                        = art_line+:x -> Art(fields=list(itertools.chain.from_iterable(x)))
art_line                        = '|' (art_line_regular | art_line_variable):x art_crlf art_separator_full art_crlf -> x
art_line_regular                = art_field+
art_line_variable               = (art_field_variable_array | art_field_variable):x -> [x]

art_field                       = (art_field_variable_array | art_field_value | art_field_variable | art_field_regular):x '|'{0,1} -> x
art_field_regular               = art_field_body_chars:a art_field_regular_width:b -> ArtField().parse(a['body']+b['body'], name=a['name'], width=b["width"], abbrv=b['abbrv'])
                                | art_field_body_chars:x -> ArtField().parse(x['body'], name=x['name'], abbrv=x['abbrv'])
art_field_regular_width         = '(':a number:b ' '+:c bits:d ')':e art_field_body_chars:f -> {"body": a+str(b)+"".join(c)+d+e+f["body"], "width": b, "abbrv": f["abbrv"]}

art_field_variable              = art_field_body_chars:x '...' -> ArtField().parse(x['body'], variable=True, name=x['name'])
art_field_variable_array        = ' '* '[' art_field_body_chars:x ']' ' '* '...' -> ArtField().parse(x['body'], variable=True, array=True, name=x['name'], abbrv=x['abbrv'])

art_field_value                 = binary:a (' ' binary)*:b -> ArtField(value=int(a+"".join(b), 2), width=len(a+"".join(b)))
                                | ' '*:a art_field_body_chars:b '=':c number:d ' '*:e -> ArtField().parse("".join(a+e)+b["body"]+c+str(d), name=b["name"], value=d, abbrv=b['abbrv'])

########################################################################
# Fields
########################################################################

fields                          = field+:fields -> Fields(fields=fields)

field                           = (field_control | field_regular)
field_regular                   = field_heading:a field_body -> Field(name=a["name"], abbrv=a["abbrv"], width=a["width"],
                                                                    expressions=([Eq(a["expression"], [Other(FieldAccess(ExtendedDiagrams.string_to_field_id(a["name"])).width())])] if a["expression"] else None),
                                                                    type=a["type"])

field_heading                   = indent field_heading_name_abbrv:a field_heading_width:b field_heading_type:type crlf*
                                -> {"name": a["name"], "abbrv": a["abbrv"], "width": b["width"], "expression": b["expression"], "type": type}
field_heading_name_abbrv        = field_heading_name:name abbrv_bracket:abbrv -> {"name": name, "abbrv": abbrv}
                                | field_heading_name:name -> {"name": name, "abbrv": None}
field_heading_name              = field_heading_name_char:a field_heading_name_char_space*:b -> a + "".join(b).strip()
field_heading_name_char         = (letterOrDigit|field_heading_name_punctuation)
field_heading_name_char_space   = (field_heading_name_char|' ')
field_heading_name_punctuation  = punctuation:x ?(x not in ":()") -> x

field_heading_width             = ':' ' '+ (field_heading_width_static | field_heading_width_variable | field_heading_width_formula)
field_heading_width_static      = number:a ' '+ bits -> {"width": a, "expression": None}
field_heading_width_variable    = 'variable' -> {"width": None, "expression": None}
field_heading_width_formula     = expression:x ' '* bits -> {"width": None, "expression": x}

field_heading_type              = ' [' type_name:a ']' crlf -> a
                                | crlf -> None
field_body                      = (indent{2} char_no_crlf* crlf+)+ crlf* -> {}

field_control                   = field_control_heading field_control_bit+:a crlf -> a
field_control_heading           = indent field_heading_name ': ' field_heading_width_static ' (from left to right):' crlf crlf
field_control_bit               = indent{2} field_heading_name_abbrv:a crlf -> Field(name=a["name"], abbrv=a["abbrv"], width=1)

########################################################################
# Expression
########################################################################

expression                      = expression_conditional

expression_conditional          = expression_equality:cond ' '* '?' ' '* expression_conditional:true ' '* ':' ' '* expression_conditional:false -> IfElse(cond, true, false)
                                | expression_equality

expression_equality             = expression_equality:left     ' '* '==' ' '*    expression_equality:right        -> Eq(left, [Other(right)])
                                | expression_equality:left     ' '* '!=' ' '*    expression_equality:right        -> Neq(left, [Other(right)])
                                | expression_boolean

expression_boolean              = expression_boolean:left     ' '* '&&' ' '*    expression_boolean:right        -> And(left, [Other(right)])
                                | expression_boolean:left     ' '* '||' ' '*    expression_boolean:right        -> Or(left, [Other(right)])
                                | expression_ordinal

expression_ordinal              = expression_ordinal:left    ' '* '<=' ' '*    expression_ordinal:right       -> Lte(left, [Other(right)])
                                | expression_ordinal:left    ' '* '<'  ' '*    expression_ordinal:right       -> Lt(left, [Other(right)])
                                | expression_ordinal:left    ' '* '>=' ' '*    expression_ordinal:right       -> Gte(left, [Other(right)])
                                | expression_ordinal:left    ' '* '>'  ' '*    expression_ordinal:right       -> Gt(left, [Other(right)])
                                | expression_additive

expression_multiplicative       = expression_multiplicative:left     ' '* '*' ' '*     expression_multiplicative:right        -> Multiply(left, [Other(right)])
                                | expression_multiplicative:left     ' '* '/' ' '*     expression_multiplicative:right        -> Divide(left, [Other(right)])
                                | expression_multiplicative:left     ' '* '%' ' '*     expression_multiplicative:right        -> Modulo(left, [Other(right)])
                                | expression_primary

expression_additive             = expression_additive:left ' '* '+' ' '*  expression_additive:right -> Plus(left, [Other(right)])
                                | expression_additive:left ' '* '-' ' '*  expression_additive:right -> Minus(left, [Other(right)])
                                | expression_multiplicative

expression_primary              = number:n  -> Constant(n)
                                | true      -> Constant(True)
                                | false     -> Constant(False)
							    | expression_field_accessor
							    | ' '* '(' ' '* expression_conditional:expr ' '* ')' ' '* -> expr

expression_field_accessor       = field_name:x '.width' -> FieldAccess(x).width()
                                | field_name:x '.length' -> FieldAccess(x).width()
                                | field_name:x '.value' -> FieldAccess(x).value()
                                | field_name:x          -> FieldAccess(x)

field_name                      = '(' field_name_main:x ')' -> ExtendedDiagrams.string_to_field_id(x)
                                | field_name_main:x -> ExtendedDiagrams.string_to_field_id(x)
field_name_word                 = spaces_word:b ?(b != ' bit' and b != ' bits' and b != ' is' and b != ' should') -> b
field_name_main                 = word:a field_name_word*:b -> Names.field_name_to_id(a + "".join(b))

########################################################################
########################################################################






### field_heading_name_punctuation  = punctuation:x ?(x not in ":()") -> x
### field_heading_name_char         = (letterOrDigit|field_heading_name_punctuation)
### field_heading_name_char_space   = (field_heading_name_char|' ')
### field_heading_name              = field_heading_name_char:a field_heading_name_char_space*:b -> {"name": a + "".join(b), "abbrv": None}
### field_heading_abbrv             = field_heading_name:a abbrv_bracket:b -> {"name": a["name"], "abbrv": b}
### field_heading_name_abbrv        = (field_heading_abbrv | field_heading_name)

### field_heading_width_static      = digit+:width ' ' bits -> {"width": int("".join(width))}
### field_heading_width_variable    = 'variable' -> {"width": -1}
### field_heading_width_formula     = expression_additive:x ' '* bits -> {"constraint": x}
### field_heading_width             = ':' ' '+ (field_heading_width_static | field_heading_width_variable | field_heading_width_formula):a field_heading_type:type -> {**a, "type": type}

### type_name                       = word:a spaces_word*:b -> a + "".join(b)
### field_heading_type              = ' [' type_name:a ']' crlf -> a
###                                 | crlf -> None

### field_heading                   = indent field_heading_name_abbrv:a field_heading_width:b crlf+ -> {"id": field_name_to_id(a["name"]), **{"name": a["name"].strip(), "abbrv": a["abbrv"]}, **b}

### field_body_line_end             = (crlf+ | ' '+)
### field_body_line_indented        = char_no_crlf*:x field_body_line_end -> "".join(x)
### field_body_line                 = indent{2} field_body_line_indented

### field_body_data_ws              = (' ' | crlf indent{2})

### field_body_data_struct_loc      = indent{2} 'If' field_body_data_ws field_name:field_this field_body_data_ws 'is' field_body_data_ws number:value ',' field_body_data_ws
###                                   field_name:field_new field_body_data_ws 'should' field_body_data_ws ('precede'|'follow'):rel_loc field_body_data_ws field_name:field_loc field_body_data_ws '(format'
###                                   field_body_data_ws 'defined' field_body_data_ws 'in' field_body_data_ws 'Section' field_body_data_ws section_number:section ').' field_body_line_indented
###                                   -> {
###                                         "structure_location": {
###                                             "field_this": field_this,
###                                             "value": value,
###                                             "field_new": field_new,
###                                             "structure_section": section,
###                                             "relative_location": rel_loc,
###                                             "field_location": field_loc
###                                         }
###                                      }
### field_body_data_struct_field    = indent{2} 'Format' field_body_data_ws 'defined' field_body_data_ws 'in' field_body_data_ws 'Section' field_body_data_ws section_number:section '.' field_body_line_indented
###                                   -> {"structure_section": section}

### field_body_data                 = field_body_data_struct_loc | field_body_data_struct_field

### field_body                      = field_body_data:x field_body_line*:y -> {**x, "description": " ".join(y).strip()}
###                                 | field_body_line*:y -> {"description": " ".join(y).strip()}

################

### field_control_heading           = indent field_heading_name ': ' field_heading_width_static ' (from left to right):' crlf crlf
### field_control_bit               = indent{2} field_heading_abbrv:a crlf -> {"id": field_name_to_id(a["name"]), "name": a["name"].strip(), "abbrv": a["abbrv"]}
### field_control                   = field_control_heading field_control_bit+:a crlf -> a

### field_regular                   = field_heading:a field_body:b -> {**a, **b}
### field                           = (field_control | field_regular)
### fields                          = field+:a -> fields(a)